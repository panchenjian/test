--   -------------------------------------------------- 
--   Generated by Enterprise Architect Version 8.0.858
--   Created On : 星期三, 04 二月, 2015 
--   DBMS       : SQL Server 2000 
--   -------------------------------------------------- 

USE JOA;

--  Drop Foreign Key Constraints 
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_RoleMenu_Menu') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE RoleMenu DROP CONSTRAINT FK_RoleMenu_Menu;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_RoleMenu_Role') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE RoleMenu DROP CONSTRAINT FK_RoleMenu_Role;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_Vacation_Employee') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE Vacation DROP CONSTRAINT FK_Vacation_Employee;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_SpecialWorkingDay_WorkingDayType') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE SpecialWorkingDay DROP CONSTRAINT FK_SpecialWorkingDay_WorkingDayType;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_OvertimeRequest_Employee') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE OvertimeRequest DROP CONSTRAINT FK_OvertimeRequest_Employee;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_OvertimeRequest_Vacation') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE OvertimeRequest DROP CONSTRAINT FK_OvertimeRequest_Vacation;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_OperateLog_Employee') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE OperateLog DROP CONSTRAINT FK_OperateLog_Employee;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_LoginLog_Employee') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE LoginLog DROP CONSTRAINT FK_LoginLog_Employee;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_LeaveUseVacation_LeaveRequest') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE LeaveUseVacation DROP CONSTRAINT FK_LeaveUseVacation_LeaveRequest;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_LeaveUseVacation_Vacation') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE LeaveUseVacation DROP CONSTRAINT FK_LeaveUseVacation_Vacation;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_LeaveRequest_Employee') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE LeaveRequest DROP CONSTRAINT FK_LeaveRequest_Employee;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_LeaveRequest_LeaveType') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE LeaveRequest DROP CONSTRAINT FK_LeaveRequest_LeaveType;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_Holiday_Employee') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE Holiday DROP CONSTRAINT FK_Holiday_Employee;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_EmployeeRole_Employee') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE EmployeeRole DROP CONSTRAINT FK_EmployeeRole_Employee;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_EmployeeRole_Role') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE EmployeeRole DROP CONSTRAINT FK_EmployeeRole_Role;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_EmployeeProject_Employee') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE EmployeeProject DROP CONSTRAINT FK_EmployeeProject_Employee;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_EmployeeProject_Project') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE EmployeeProject DROP CONSTRAINT FK_EmployeeProject_Project;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_AuditBoss_Employee') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE AuditBoss DROP CONSTRAINT FK_AuditBoss_Employee;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_Attendance_Employee') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE Attendance DROP CONSTRAINT FK_Attendance_Employee;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_Attendance_LeaveRequest') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE Attendance DROP CONSTRAINT FK_Attendance_LeaveRequest;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_Attendance_LeaveType') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE Attendance DROP CONSTRAINT FK_Attendance_LeaveType;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_Attendance_OvertimeRequest') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE Attendance DROP CONSTRAINT FK_Attendance_OvertimeRequest;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_Employee_Company') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE Employee DROP CONSTRAINT FK_Employee_Company;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_Employee_Position') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE Employee DROP CONSTRAINT FK_Employee_Position;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_Employee_WorkingDayType') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE Employee DROP CONSTRAINT FK_Employee_WorkingDayType;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_Employee_JobFunction') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE Employee DROP CONSTRAINT FK_Employee_JobFunction;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('FK_Employee_Department') AND OBJECTPROPERTY(id, 'IsForeignKey') = 1)
ALTER TABLE Employee DROP CONSTRAINT FK_Employee_Department;


--  Drop Tables, Stored Procedures and Views 

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('RoleMenu') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE RoleMenu;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('WorkingDayType') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE WorkingDayType;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('Vacation') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE Vacation;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('SpecialWorkingDay') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE SpecialWorkingDay;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('Role') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE Role;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('Project') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE Project;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('Position') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE Position;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('OvertimeRequest') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE OvertimeRequest;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('OperateLog') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE OperateLog;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('Menu') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE Menu;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('LoginLog') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE LoginLog;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('LeaveUseVacation') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE LeaveUseVacation;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('LeaveType') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE LeaveType;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('LeaveRequest') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE LeaveRequest;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('JobFunction') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE JobFunction;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('Holiday') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE Holiday;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('EmployeeRole') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE EmployeeRole;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('EmployeeProject') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE EmployeeProject;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('Department') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE Department;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('Company') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE Company;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('AuditBoss') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE AuditBoss;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('Attendance') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE Attendance;

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id('Employee') AND  OBJECTPROPERTY(id, 'IsUserTable') = 1)
DROP TABLE Employee;


--  Create Tables 
CREATE TABLE RoleMenu ( 
	RoleMenuId int identity(1,1)  NOT NULL,    --  PK 
	RoleId int NOT NULL,    --  FK, 对应的角色 
	MenuId int NOT NULL,    --  FK 对应的菜单 
);

CREATE TABLE WorkingDayType ( 
	WorkingDayTypeId int identity(1,1)  NOT NULL,    --  PK 
	TypeCode varchar(20) NOT NULL,    --  工作日类型编码 
	TypeName nvarchar(20) NOT NULL,    --  工作日类型名称 
	StartTime varchar(5),    --  上班时间; 不填表示不限上班时间(弹性工时); 格式: HH:mm 
	EndTime varchar(5),    --  下班时间; 不填表示不限下班时间(弹性工时); 格式: HH:mm 
	LateMinutes int DEFAULT 0 NOT NULL,    --  可以迟到的时间，以分钟为单位 
	WorkingHours decimal(10,2) DEFAULT 9 NOT NULL,    --  实际在公司时间(包含中间休息时间) 
	Description nvarchar(500),    --  描述 
	Rank int NOT NULL,    --  排序 
	Location int NOT NULL,    --  归属地; 1: 中国(前缀: cn), 2: 台湾(前缀: tw) 
	IsFlexTime bit DEFAULT 0 NOT NULL,    --  是否弹性工时(每天只要有打卡即可); 0: 非弹性工时, 1: 弹性工时 
	IsSpecialDay bit DEFAULT 0 NOT NULL,    --  是否为特殊工作日, e.g. 客服做一休一、做六休一; 0: 非特殊工作日，员工周休二日，国定假日、补班日期，参考「Holiday」表; 1: 特殊工作日，需设定「SpecialWorkingDay」 
	IsMealAllowance bit DEFAULT 1 NOT NULL,    --  是否有餐费津贴(平常日加班，如果超过晚餐结束时间半小时之后，就有餐费津贴); 0: 有津贴, 1: 无津贴 
	StartDiningTime varchar(5),    --  用餐开始时间(用餐时间内，不记入加班时间); 格式: HH:mm 
	EndDiningTime varchar(5)    --  用餐结束时间(用餐时间内，不记入加班时间); 格式: HH:mm 
);

CREATE TABLE Vacation ( 
	VacationId int identity(1,1)  NOT NULL,    --  PK 
	EmployeeId int NOT NULL,    --  FK, 对应的员工 
	VacationType int NOT NULL,    --  假期类型; 1: 年假, 2: 调休假(加班累积的假) 
	Annual datetime NOT NULL,    --  年度 
	StartTime datetime,    --  可用开始时间; 不填表示不限制 
	ExpireTime datetime,    --  过期时间; 不填表示不限制 
	VacationDuration decimal(10,2) NOT NULL,    --  假期总时数; 单位: 小时，最小单位为0.5小时。该年度可使用的所有时数，只会增加(因为调休)，不会因为请假而减少。使用时数，从LeaveRequest中查询 
	Location int DEFAULT 1 NOT NULL,    --  归属地; 1: 中国(前缀: cn), 2: 台湾(前缀: tw) 
	CreateTime datetime DEFAULT GETDATE() NOT NULL    --  建立时间 
);

CREATE TABLE SpecialWorkingDay ( 
	SpecialWorkingDayId int identity(1,1)  NOT NULL,    --  PK 
	WorkingDayTypeId int NOT NULL,    --  FK, 对应的工作日类型 
	WorkingDay datetime,    --  上班日期; 年月日有用 
	CreateTime datetime DEFAULT GETDATE() NOT NULL    --  建立时间 
);

CREATE TABLE Role ( 
	RoleId int identity(1,1)  NOT NULL,
	RoleCode varchar(20) NOT NULL,    --  角色编码 
	RoleName nvarchar(20) NOT NULL,    --  角色名称 
	RoleLevel int NOT NULL,    --  角色等级，数字越小，等级越高 
	Description nvarchar(200),    --  说明 
	CreateTime datetime DEFAULT GETDATE() NOT NULL,    --  建立时间 
	IsEnabled bit DEFAULT 1 NOT NULL,    --  是否启用; 0: 停用, 1: 启用 
	Location int DEFAULT 1 NOT NULL,    --  归属地; 1: 中国(前缀: cn) 2: 台湾(前缀: tw) 
);

CREATE TABLE Project ( 
	ProjectId int identity(1,1)  NOT NULL,    --  PK 
	ProjectCode varchar(30) NOT NULL,    --  专案编码 
	ProjectName nvarchar(50) NOT NULL,    --  专案名称 
	Description nvarchar(500),    --  描述 
	Location int DEFAULT 1 NOT NULL,    --  归属地; 1: 中国(前缀: cn), 2: 台湾(前缀: tw) 
	CreateTime datetime DEFAULT GETDATE() NOT NULL,    --  建立时间 
	Rank int DEFAULT 1 NOT NULL,    --  排序 
	IsEnabled bit DEFAULT 1 NOT NULL,    --  是否启用; 0: 停用 1: 启用 
);

CREATE TABLE Position ( 
	PositionId int identity(1,1)  NOT NULL,    --  PK 
	PositionCode varchar(30) NOT NULL,    --  职位编码 
	PositionName nvarchar(50) NOT NULL,    --  职位名称 
	Level int NOT NULL,    --  职位等级; 数字越小，等级越高 
	CreateTime datetime DEFAULT GETDATE() NOT NULL,    --  建立时间 
	IsEnabled bit DEFAULT 1 NOT NULL,    --  是否启用; 0: 停用, 1: 启用 
	Location int DEFAULT 1 NOT NULL,    --  归属地; 1: 中国(前缀: cn) 2: 台湾(前缀: tw) 
);

CREATE TABLE OvertimeRequest ( 
	OvertimeRequestId int identity(1,1)  NOT NULL,    --  PK 
	EmployeeId int NOT NULL,    --  FK, 对应的员工 
	CreateTime datetime DEFAULT GETDATE() NOT NULL,    --  建立时间 
	ExpectTime datetime NOT NULL,    --  预计加班时间 
	OvertimeReason nvarchar(200) NOT NULL,    --  加班原因 
	AuditStatus int DEFAULT 10 NOT NULL,    --  审核状态; 0：取消(只有状态是:待审核、主管审核中时，申请者可以取消; 审核通过之后，只有主管可以取消), 10: 待审核, 20: 主管审核中, 21: 审核通过, 22: 审核不通过 
	BossId int NOT NULL,    --  审核主管员工编号 
	AuditComment nvarchar(200),    --  主管审核意见 
	AuditTime datetime,    --  审核时间(审核通过或不通过) 
	CancelTime datetime,    --  取消时间 
	StartTime datetime,    --  实际加班开始时间，由人事填入 
	EndTime datetime,    --  实际加班结束时间，由人事填入 
	OvertimeDuration decimal(10,2),    --  加班时数，单位：小时；最小单位为0.5小时; 由人事填入 
	HrId int,    --  隐藏的FK关系，负责的人事部人员 
	VacationId int,    --  FK 加班获得的调休时数，需要累加到对应的「调休假假期」时数中 
);

CREATE TABLE OperateLog ( 
	OperateLogId int identity(1,1)  NOT NULL,    --  PK 
	EmployeeId int NOT NULL,    --  FK, 执行此操作的员工 
	TableName varchar(50) NOT NULL,    --  操作的表名 
	TableID int NOT NULL,    --  操作表的PK 
	OperateType int NOT NULL,    --  操作类型; 1: 增, 2: 删, 3: 改, 4: 审核, 5: 导出, 6: 查, 7: 登入 
	Before ntext,    --  操作前内容; 当OperateType为1(增)、3(改)、4(审核)时会有内容 
	After ntext,    --  操作后内容; 当OperateType为3(改)、4(审核)时会有内容 
	CreateTime datetime DEFAULT GETDATE() NOT NULL,    --  建立时间 
	IP varchar(15) NOT NULL,    --  IP 
	Description nvarchar(500)    --  日志描述 
);

CREATE TABLE Menu ( 
	MenuId int identity(1,1)  NOT NULL,    --  PK 
	MenuCode varchar(50) NOT NULL,    --  菜单编码 
	MenuName nvarchar(10) NOT NULL,    --  菜单名称 
	MenuClass varchar(30),    --  菜单显示的样式类 
	MenuLevel int DEFAULT 1 NOT NULL,    --  菜单层级 
	ParentMenuId int DEFAULT 0 NOT NULL,    --  上层菜单; 0 表示已经是最上层 
	ActionPath varchar(50),    --  菜单链接路径; 不填表示无链接效果 
	Rank int DEFAULT 1 NOT NULL,    --  排序 
	CreateTime datetime DEFAULT GETDATE() NOT NULL,    --  建立时间 
	IsEnabled bit DEFAULT 1 NOT NULL,    --  是否启用; 0: 停用, 1: 启用 
	IsNavigate bit DEFAULT 1 NOT NULL,    --  是否出现在导航菜单中 
	NavigateCode varchar(30) NOT NULL    --  要展开、highlight的菜单导航，使用显示的code; IsNavigate = true 时，NavigateCode = MenuCode; IsNavigate = false 时，NavigateCode = 想与哪个菜单(IsNavigate = true)一樣展開、highlight 
);

CREATE TABLE LoginLog ( 
	LoginLogId int identity(1,1)  NOT NULL,    --  PK 
	EmployeeId int NOT NULL,    --  FK, 对应的员工 
	LoginTime datetime DEFAULT GETDATE() NOT NULL,    --  建立时间 
	LoginIP varchar(15) NOT NULL    --  登入IP 
);

CREATE TABLE LeaveUseVacation ( 
	LeaveUseVacationId int NOT NULL,    --  PK 
	LeaveRequestId int NOT NULL,    --  FK, 对应的请假表 
	VacationId int NOT NULL,    --  FK, 对应的假期表 
	VacationDuration decimal(10,2) NOT NULL,    --  使用假期时数 
	CreateTime datetime DEFAULT GETDATE() NOT NULL    --  建立时间 
);

CREATE TABLE LeaveType ( 
	LeaveTypeId int identity(1,1)  NOT NULL,    --  PK 
	LeaveCode varchar(50) NOT NULL,    --  假期编码 
	LeaveName nvarchar(50) NOT NULL,    --  假期名称 
	LeaveRule ntext NOT NULL,    --  请假规定 
	IsNeedHrAudit bit DEFAULT 0 NOT NULL,    --  请假是否需要人事部审核; 0: 否, 1: 是 
	Location int DEFAULT 1 NOT NULL,    --  归属地; 1: 中国(前缀: cn) 2: 台湾(前缀: tw) 
);

CREATE TABLE LeaveRequest ( 
	LeaveRequestId int identity(1,1)  NOT NULL,    --  PK 
	EmployeeId int NOT NULL,    --  FK, 请假的员工 
	CreateTime datetime DEFAULT GETDATE() NOT NULL,    --  建立时间 
	LeaveTypeId int NOT NULL,    --  FK, 请假类型 
	LeaveReason nvarchar(200) NOT NULL,    --  请假原因 
	StartTime datetime NOT NULL,    --  请假开始日期 
	EndTime datetime NOT NULL,    --  请假结束日期 
	LeaveDuration decimal(10,2) NOT NULL,    --  请假总时数，单位：小时；最小单位为0.5小时 
	AuditStatus int DEFAULT 10 NOT NULL,    --  审核状态; 0：取消(只有状态是:待审核、主管审核中时，申请者可以取消; 审核通过之后，只有主管可以取消), 10: 待审核, 20: 主管审核中, 21: 审核通过, 22: 审核不通过 
	BossId int NOT NULL,    --  隐藏的FK关系，负责审核的主管 
	AuditComment nvarchar(200),    --  主管审核意见 
	AcceptTime datetime,    --  主管接受请求(设定为待审核)的时间 
	AuditTime datetime,    --  审核时间(审核通过或不通过) 
	CancelTime datetime,    --  取消时间 
	HrComment nvarchar(200),    --  人事部门审核意见 
	HrAuditStatus int DEFAULT 10,    --  请假类型是挥假、丧假之类的类型时，需要人事部审核; 10: 待审核, 20: 人事审核中, 21: 审核通过, 22: 审核不通过 
	HrId int,    --  隐藏的FK关系，负责审核的人事部人员 
	HrAcceptTime datetime,    --  人事接受请求(设定为待审核)的时间 
	HrAuditTime datetime    --  人事审核时间(审核通过或不通过) 
);

CREATE TABLE JobFunction ( 
	JobFunctionId int identity(1,1)  NOT NULL,    --  PK 
	FunctionCode varchar(50) NOT NULL,    --  职能编码 
	FunctionName nvarchar(10) NOT NULL,    --  职能名称 
	CreateTime datetime DEFAULT GETDATE() NOT NULL,    --  建立时间 
	Rank int NOT NULL,    --  排序 
	Location int DEFAULT 1 NOT NULL,    --  归属地; 1: 中国(前缀: cn) 2: 台湾(前缀: tw) 
);

CREATE TABLE Holiday ( 
	HolidayId int identity(1,1)  NOT NULL,    --  PK 
	DayName nvarchar(20) NOT NULL,    --  日期名称; e.g. 元旦、中秋节 
	TheDay datetime NOT NULL,    --  指定日期 
	IsWorkingDay bit DEFAULT 0 NOT NULL,    --  是否为工作日; 0: 非工作日(假日), 1 工作日。指定日期在周一～周五，为「非工作日」;指定日期在周六、日，为「工作日」 
	CreateTime datetime DEFAULT GETDATE() NOT NULL,    --  建立时间 
	HolidayDuration int DEFAULT 0 NOT NULL,    --  提早放假时间; 只有「非工作日」有用，等于0，表示整天放假。e.g. 2: 表示当天「提早」2小时下班 
	IsForFemale bit DEFAULT 0 NOT NULL,    --  此假期是否只适用女性; 只有「非工作日」有用; 0: 不限男女, 1: 只限女性 
	EmployeeId int NOT NULL,    --  FK, 设定的管理员 
	Location int DEFAULT 1 NOT NULL,    --  归属地; 1: 中国(前缀: cn), 2: 台湾(前缀: tw) 
	OvertimeReturnTimes int DEFAULT 1 NOT NULL    --  假日加班，需返还的加班时数倍数 
);

CREATE TABLE EmployeeRole ( 
	EmployeeRoleId int identity(1,1)  NOT NULL,    --  PK 
	RoleId int NOT NULL,    --  FK, 对应的角色 
	EmployeeId int NOT NULL,    --  FK, 对应的员工 
	CreateTime datetime DEFAULT GETDATE() NOT NULL    --  建立时间 
);

CREATE TABLE EmployeeProject ( 
	EmployeeProjectId int identity(1,1)  NOT NULL,    --  PK 
	EmployeeId int NOT NULL,    --  FK, 对应的员工 
	ProjectId int NOT NULL,    --  FK 对应的专案 
);

CREATE TABLE Department ( 
	DepartmentId int identity(1,1)  NOT NULL,    --  PK 
	DepartmentCode varchar(20) NOT NULL,    --  部门编码 
	DepartmentName nvarchar(50),    --  部门名称 
	Level int DEFAULT 1 NOT NULL,    --  部门层级 
	ParentId int NOT NULL,    --  上级部门的ID；如果是第一层(Level=1)，则填0 
	CreateTime datetime DEFAULT GETDATE(),    --  建立时间 
	Rank int NOT NULL,    --  排序 
	IsEnabled bit DEFAULT 1 NOT NULL,    --  是否启用; 0: 停用, 1: 启用 
	Location int DEFAULT 1 NOT NULL,    --  归属地; 1: 中国(前缀: cn) 2: 台湾(前缀: tw) 
);

CREATE TABLE Company ( 
	CompanyId int identity(1,1)  NOT NULL,    --  PK 
	CompanyName nvarchar(20) NOT NULL,    --  公司名称 
	Location int DEFAULT 1 NOT NULL,    --  归属地; 1: 中国(前缀: cn) 2: 台湾(前缀: tw) 
);

CREATE TABLE AuditBoss ( 
	AuditBossId int identity(1,1)  NOT NULL,    --  PK 
	EmployeeId int NOT NULL,    --  FK, 对应的被审核员工 
	BossId int NOT NULL,    --  隐藏的FK关系，负责审核该员工的主管 
	Step int DEFAULT 1 NOT NULL,    --  审核步骤; 如果有多个主管，而且有审核顺序时设定(e.g. 收主管A省核通过，才能提交给主管B审核); 1 表示最先审核 
	CreateTime datetime DEFAULT GETDATE() NOT NULL    --  建立时间 
);

CREATE TABLE Attendance ( 
	AttendanceId int identity(1,1)  NOT NULL,    --  PK 
	WorkingDay datetime NOT NULL,    --  工作日; 只有年月日有效，不考虑时分秒 
	EmployeeId int NOT NULL,    --  FK, 关连的员工 
	ArriveTime datetime,    --  上班时间 
	LeaveTime datetime,    --  下班时间 
	IsArriveLate bit DEFAULT 0,    --  是否迟到; 0: 没迟到, 1: 迟到 
	IsLeaveEarly bit DEFAULT 0,    --  是否早退; 0: 没早退, 1: 早退 
	ArriveLateDuration int DEFAULT 0,    --  迟到时间; 单位: 分钟; IsArriveLate = 1 时有效 
	LeaveEarlyDuration int DEFAULT 0,    --  早退时间; 单位: 分钟; IsLeaveEarly = 1 时有效 
	LeaveTypeId int DEFAULT 0,    --  FK, 请假类型 
	LeaveDuration decimal(10,2),    --  当天请假时数，单位：小时；最小单位为0.5小时; 一天最多8小时 
	CreateTime datetime DEFAULT GETDATE() NOT NULL,    --  建立时间 
	LeaveRequestId int,    --  FK, 若是有请假，则关连到请假申请 
	OvertimeRequestId int,    --  FK, 对应的加班请求; 不为null 而且对应的审核状态为审核通过，表示加班 
);

CREATE TABLE Employee ( 
	EmployeeId int identity(1,1)  NOT NULL,    --  PK, 员工工号, 由管理员输入 
	Location int DEFAULT 1 NOT NULL,    --  员工归属地; 0: 不限(e.g. 老板), 1: 中国(前缀: cn), 2: 台湾(前缀: tw) 
	EmolpyeeNumber varchar(10) NOT NULL,    --  员工编码，由人事部填入；依归属地，加入不同的前缀(e.g. cn、tw) 
	EmployeeName nvarchar(10) NOT NULL,    --  员工姓名 
	EmployeeStatus int DEFAULT 1 NOT NULL,    --  员工状态; 0: 离职, 1: 在职, 10: 留职停薪, 11: 长期病假 
	NickName nvarchar(20) NOT NULL,    --  昵称 
	OnBoardDate datetime NOT NULL,    --  入职日期 
	IdentityNumber varchar(20) NOT NULL,    --  身分证字号 
	Email varchar(50) NOT NULL,    --  公司邮箱; 因为可能离职后又入职，所以e-mail 会相同; 不用SSO登入的话，使用e-mail当做帐号登入 
	Password varchar(50) NOT NULL,    --  登入密码 
	PersonalEmail varchar(50) NOT NULL,    --  个人邮箱，接收薪资通知用 
	Mobile varchar(11) NOT NULL,    --  手机号 
	Ext varchar(10) NOT NULL,    --  分机号 
	Birthday datetime NOT NULL,    --  生日 
	Gender bit NOT NULL,    --  性别; 0: 女性, 1: 男性 
	IsMarried bit DEFAULT 0 NOT NULL,    --  是否结婚; 0: 未婚, 1: 已婚 
	MarriageDate datetime,    --  结婚日期 
	HasChild bit DEFAULT 0 NOT NULL,    --  是否有小孩; 0: 无, 1: 有 
	CommAddress nvarchar(100),    --  通讯地址 
	CommPhone varchar(20),    --  通讯地址电话 
	RegAddress nvarchar(100) NOT NULL,    --  户籍地址 
	RegPhone varchar(20),    --  户籍地址电话 
	EmergencyName nvarchar(10) NOT NULL,    --  紧急联系人姓名 
	EmergencyMobile varchar(11) NOT NULL,    --  紧急联系人电话 
	EmergencyRelation nvarchar(10) NOT NULL,    --  紧急联系人关系 
	RecruitSource int NOT NULL,    --  招聘来源 
	CompanyId int NOT NULL,    --  FK, 所属公司 
	DepartmentId int NOT NULL,    --  FK, 所属部门 
	PositionId int NOT NULL,    --  FK, 所属职位 
	JobFunctionId int,    --  FK, 所属的职能; 可为空 
	LaborType int DEFAULT 1 NOT NULL,    --  劳动类型; 1: 正职, 2: 劳务(兼职、临时工、钟点工、实习生) 
	LeaveDate datetime,    --  离职日期 
	CreateTime datetime DEFAULT GETDATE() NOT NULL,    --  建立时间 
	WorkingDayTypeId int,    --  FK, 对应的工作日类型; 不填表示不计时，e.g. 老板、司机 
	LoginTime datetime,    --  最后登入时间 
	LoginIp varchar(15),    --  最后登入IP 
	BossId int NOT NULL,    --  主管员工编号 
	ImagePath varchar(200),    --  个人图片路径 
	ForceChangePassword bit DEFAULT 0 NOT NULL,    --  登入后，强制修改登入密码; 1：强制修改密码, 0: 已修改，不强制修改密码 
	AgentId int,    --  代理人 
	OpenId varchar(50)    --  联合登入后，保存的Open id 
);


--  Create Primary Key Constraints 
ALTER TABLE RoleMenu ADD CONSTRAINT PK_RoleMenu 
	PRIMARY KEY CLUSTERED (RoleMenuId);

ALTER TABLE WorkingDayType ADD CONSTRAINT PK_WorkingDayType 
	PRIMARY KEY CLUSTERED (WorkingDayTypeId);

ALTER TABLE Vacation ADD CONSTRAINT PK_Vacation 
	PRIMARY KEY CLUSTERED (VacationId);

ALTER TABLE SpecialWorkingDay ADD CONSTRAINT PK_SpecialWorkingDay 
	PRIMARY KEY CLUSTERED (SpecialWorkingDayId);

ALTER TABLE Role ADD CONSTRAINT PK_Role 
	PRIMARY KEY CLUSTERED (RoleId);

ALTER TABLE Project ADD CONSTRAINT PK_Project 
	PRIMARY KEY CLUSTERED (ProjectId);

ALTER TABLE Position ADD CONSTRAINT PK_Position 
	PRIMARY KEY CLUSTERED (PositionId);

ALTER TABLE OvertimeRequest ADD CONSTRAINT PK_OvertimeRequest 
	PRIMARY KEY CLUSTERED (OvertimeRequestId);

ALTER TABLE OperateLog ADD CONSTRAINT PK_OperateLog 
	PRIMARY KEY CLUSTERED (OperateLogId);

ALTER TABLE Menu ADD CONSTRAINT PK_Menu 
	PRIMARY KEY CLUSTERED (MenuId);

ALTER TABLE LoginLog ADD CONSTRAINT PK_LoginLog 
	PRIMARY KEY CLUSTERED (LoginLogId);

ALTER TABLE LeaveUseVacation ADD CONSTRAINT PK_LeaveUseVacation 
	PRIMARY KEY CLUSTERED (LeaveUseVacationId);

ALTER TABLE LeaveType ADD CONSTRAINT PK_LeaveType 
	PRIMARY KEY CLUSTERED (LeaveTypeId);

ALTER TABLE LeaveRequest ADD CONSTRAINT PK_LeaveRequest 
	PRIMARY KEY CLUSTERED (LeaveRequestId);

ALTER TABLE JobFunction ADD CONSTRAINT PK_JobFunction 
	PRIMARY KEY CLUSTERED (JobFunctionId);

ALTER TABLE Holiday ADD CONSTRAINT PK_Holiday 
	PRIMARY KEY CLUSTERED (HolidayId);

ALTER TABLE EmployeeRole ADD CONSTRAINT PK_EmployeeRole 
	PRIMARY KEY CLUSTERED (EmployeeRoleId);

ALTER TABLE EmployeeProject ADD CONSTRAINT PK_EmployeeProject 
	PRIMARY KEY CLUSTERED (EmployeeProjectId);

ALTER TABLE Department ADD CONSTRAINT PK_Department 
	PRIMARY KEY CLUSTERED (DepartmentId);

ALTER TABLE Company ADD CONSTRAINT PK_Company 
	PRIMARY KEY CLUSTERED (CompanyId);

ALTER TABLE AuditBoss ADD CONSTRAINT PK_AuditBoss 
	PRIMARY KEY CLUSTERED (AuditBossId);

ALTER TABLE Attendance ADD CONSTRAINT PK_Attendance 
	PRIMARY KEY CLUSTERED (AttendanceId);

ALTER TABLE Employee ADD CONSTRAINT PK_Employee 
	PRIMARY KEY CLUSTERED (EmployeeId);


--  Create Indexes 
ALTER TABLE RoleMenu
	ADD CONSTRAINT UQ_RoleMenu_RoleMenuId UNIQUE (RoleMenuId);

ALTER TABLE WorkingDayType
	ADD CONSTRAINT UQ_WorkingDayType_TypeCode UNIQUE (TypeCode);

ALTER TABLE WorkingDayType
	ADD CONSTRAINT UQ_WorkingDayType_WorkingDayTypeId UNIQUE (WorkingDayTypeId);

ALTER TABLE Vacation
	ADD CONSTRAINT UQ_Vacation_VacationId UNIQUE (VacationId);

ALTER TABLE SpecialWorkingDay
	ADD CONSTRAINT UQ_SpecialWorkingDay_SpecialWorkingDayId UNIQUE (SpecialWorkingDayId);

ALTER TABLE Role
	ADD CONSTRAINT UQ_Role_RoleCode UNIQUE (RoleCode);

ALTER TABLE Role
	ADD CONSTRAINT UQ_Role_RoleId UNIQUE (RoleId);

ALTER TABLE Project
	ADD CONSTRAINT UQ_Project_ProjectCode UNIQUE (ProjectCode);

ALTER TABLE Project
	ADD CONSTRAINT UQ_Project_ProjectId UNIQUE (ProjectId);

ALTER TABLE Position
	ADD CONSTRAINT UQ_Position_PositionCode UNIQUE (PositionCode);

ALTER TABLE Position
	ADD CONSTRAINT UQ_Position_PositionId UNIQUE (PositionId);

ALTER TABLE Position
	ADD CONSTRAINT UQ_Position_PositionName UNIQUE (PositionName);

ALTER TABLE OvertimeRequest
	ADD CONSTRAINT UQ_OvertimeRequest_OvertimeRequestId UNIQUE (OvertimeRequestId);

ALTER TABLE OperateLog
	ADD CONSTRAINT UQ_OperateLog_OperateLogId UNIQUE (OperateLogId);

ALTER TABLE Menu
	ADD CONSTRAINT UQ_Menu_MenuCode UNIQUE (MenuCode);

ALTER TABLE Menu
	ADD CONSTRAINT UQ_Menu_MenuId UNIQUE (MenuId);

ALTER TABLE LoginLog
	ADD CONSTRAINT UQ_LoginLog_LoginLogId UNIQUE (LoginLogId);

ALTER TABLE LeaveUseVacation
	ADD CONSTRAINT UQ_LeaveUseVacation_LeaveUseVacationId UNIQUE (LeaveUseVacationId);

ALTER TABLE LeaveType
	ADD CONSTRAINT UQ_LeaveType_LeaveCode UNIQUE (LeaveCode);

ALTER TABLE LeaveType
	ADD CONSTRAINT UQ_LeaveType_LeaveTypeId UNIQUE (LeaveTypeId);

ALTER TABLE LeaveRequest
	ADD CONSTRAINT UQ_LeaveRequest_LeaveRequestId UNIQUE (LeaveRequestId);

ALTER TABLE JobFunction
	ADD CONSTRAINT UQ_JobFunction_FunctionCode UNIQUE (FunctionCode);

ALTER TABLE JobFunction
	ADD CONSTRAINT UQ_JobFunction_FunctionName UNIQUE (FunctionName);

ALTER TABLE JobFunction
	ADD CONSTRAINT UQ_JobFunction_JobFunctionId UNIQUE (JobFunctionId);

ALTER TABLE Holiday
	ADD CONSTRAINT UQ_Holiday_HolidayId UNIQUE (HolidayId);

ALTER TABLE EmployeeRole
	ADD CONSTRAINT UQ_EmployeeRole_EmployeeRoleId UNIQUE (EmployeeRoleId);

ALTER TABLE EmployeeProject
	ADD CONSTRAINT UQ_EmployeeProject_EmployeeProjectId UNIQUE (EmployeeProjectId);

ALTER TABLE Department
	ADD CONSTRAINT UQ_Department_DepartmentCode UNIQUE (DepartmentCode);

ALTER TABLE Department
	ADD CONSTRAINT UQ_Department_DepartmentId UNIQUE (DepartmentId);

ALTER TABLE Department
	ADD CONSTRAINT UQ_Department_DepartmentName UNIQUE (DepartmentName);

ALTER TABLE Company
	ADD CONSTRAINT UQ_Company_CompanyId UNIQUE (CompanyId);

ALTER TABLE Company
	ADD CONSTRAINT UQ_Company_CompanyName UNIQUE (CompanyName);

ALTER TABLE AuditBoss
	ADD CONSTRAINT UQ_AuditBoss_AuditBossId UNIQUE (AuditBossId);

ALTER TABLE Attendance
	ADD CONSTRAINT UQ_Attendance_AttendanceId UNIQUE (AttendanceId);

ALTER TABLE Employee
	ADD CONSTRAINT UQ_Employee_EmolpyeeNumber UNIQUE (EmolpyeeNumber);

ALTER TABLE Employee
	ADD CONSTRAINT UQ_Employee_EmployeeId UNIQUE (EmployeeId);

ALTER TABLE Employee
	ADD CONSTRAINT UQ_Employee_IdentityNumber UNIQUE (IdentityNumber);


--  Create Foreign Key Constraints 
ALTER TABLE RoleMenu ADD CONSTRAINT FK_RoleMenu_Menu 
	FOREIGN KEY (MenuId) REFERENCES Menu (MenuId);

ALTER TABLE RoleMenu ADD CONSTRAINT FK_RoleMenu_Role 
	FOREIGN KEY (RoleId) REFERENCES Role (RoleId);

ALTER TABLE Vacation ADD CONSTRAINT FK_Vacation_Employee 
	FOREIGN KEY (EmployeeId) REFERENCES Employee (EmployeeId);

ALTER TABLE SpecialWorkingDay ADD CONSTRAINT FK_SpecialWorkingDay_WorkingDayType 
	FOREIGN KEY (WorkingDayTypeId) REFERENCES WorkingDayType (WorkingDayTypeId);

ALTER TABLE OvertimeRequest ADD CONSTRAINT FK_OvertimeRequest_Employee 
	FOREIGN KEY (EmployeeId) REFERENCES Employee (EmployeeId);

ALTER TABLE OvertimeRequest ADD CONSTRAINT FK_OvertimeRequest_Vacation 
	FOREIGN KEY (VacationId) REFERENCES Vacation (VacationId);

ALTER TABLE OperateLog ADD CONSTRAINT FK_OperateLog_Employee 
	FOREIGN KEY (EmployeeId) REFERENCES Employee (EmployeeId);

ALTER TABLE LoginLog ADD CONSTRAINT FK_LoginLog_Employee 
	FOREIGN KEY (EmployeeId) REFERENCES Employee (EmployeeId);

ALTER TABLE LeaveUseVacation ADD CONSTRAINT FK_LeaveUseVacation_LeaveRequest 
	FOREIGN KEY (LeaveRequestId) REFERENCES LeaveRequest (LeaveRequestId);

ALTER TABLE LeaveUseVacation ADD CONSTRAINT FK_LeaveUseVacation_Vacation 
	FOREIGN KEY (VacationId) REFERENCES Vacation (VacationId);

ALTER TABLE LeaveRequest ADD CONSTRAINT FK_LeaveRequest_Employee 
	FOREIGN KEY (EmployeeId) REFERENCES Employee (EmployeeId);

ALTER TABLE LeaveRequest ADD CONSTRAINT FK_LeaveRequest_LeaveType 
	FOREIGN KEY (LeaveTypeId) REFERENCES LeaveType (LeaveTypeId);

ALTER TABLE Holiday ADD CONSTRAINT FK_Holiday_Employee 
	FOREIGN KEY (EmployeeId) REFERENCES Employee (EmployeeId);

ALTER TABLE EmployeeRole ADD CONSTRAINT FK_EmployeeRole_Employee 
	FOREIGN KEY (EmployeeId) REFERENCES Employee (EmployeeId);

ALTER TABLE EmployeeRole ADD CONSTRAINT FK_EmployeeRole_Role 
	FOREIGN KEY (RoleId) REFERENCES Role (RoleId);

ALTER TABLE EmployeeProject ADD CONSTRAINT FK_EmployeeProject_Employee 
	FOREIGN KEY (EmployeeId) REFERENCES Employee (EmployeeId);

ALTER TABLE EmployeeProject ADD CONSTRAINT FK_EmployeeProject_Project 
	FOREIGN KEY (ProjectId) REFERENCES Project (ProjectId);

ALTER TABLE AuditBoss ADD CONSTRAINT FK_AuditBoss_Employee 
	FOREIGN KEY (EmployeeId) REFERENCES Employee (EmployeeId);

ALTER TABLE Attendance ADD CONSTRAINT FK_Attendance_Employee 
	FOREIGN KEY (EmployeeId) REFERENCES Employee (EmployeeId);

ALTER TABLE Attendance ADD CONSTRAINT FK_Attendance_LeaveRequest 
	FOREIGN KEY (LeaveRequestId) REFERENCES LeaveRequest (LeaveRequestId);

ALTER TABLE Attendance ADD CONSTRAINT FK_Attendance_LeaveType 
	FOREIGN KEY (LeaveTypeId) REFERENCES LeaveType (LeaveTypeId);

ALTER TABLE Attendance ADD CONSTRAINT FK_Attendance_OvertimeRequest 
	FOREIGN KEY (OvertimeRequestId) REFERENCES OvertimeRequest (OvertimeRequestId);

ALTER TABLE Employee ADD CONSTRAINT FK_Employee_Company 
	FOREIGN KEY (CompanyId) REFERENCES Company (CompanyId);

ALTER TABLE Employee ADD CONSTRAINT FK_Employee_Position 
	FOREIGN KEY (PositionId) REFERENCES Position (PositionId);

ALTER TABLE Employee ADD CONSTRAINT FK_Employee_WorkingDayType 
	FOREIGN KEY (WorkingDayTypeId) REFERENCES WorkingDayType (WorkingDayTypeId);

ALTER TABLE Employee ADD CONSTRAINT FK_Employee_JobFunction 
	FOREIGN KEY (JobFunctionId) REFERENCES JobFunction (JobFunctionId);

ALTER TABLE Employee ADD CONSTRAINT FK_Employee_Department 
	FOREIGN KEY (DepartmentId) REFERENCES Department (DepartmentId);









EXEC sp_addextendedproperty 'MS_Description', '角色菜单表', 'User', dbo, 'table', RoleMenu;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', RoleMenu, 'column', RoleMenuId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的角色', 'User', dbo, 'table', RoleMenu, 'column', RoleId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的菜单', 'User', dbo, 'table', RoleMenu, 'column', MenuId;

EXEC sp_addextendedproperty 'MS_Description', '工作日类型表', 'User', dbo, 'table', WorkingDayType;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', WorkingDayType, 'column', WorkingDayTypeId;

EXEC sp_addextendedproperty 'MS_Description', '工作日类型编码', 'User', dbo, 'table', WorkingDayType, 'column', TypeCode;

EXEC sp_addextendedproperty 'MS_Description', '工作日类型名称', 'User', dbo, 'table', WorkingDayType, 'column', TypeName;

EXEC sp_addextendedproperty 'MS_Description', '上班时间; 不填表示不限上班时间(弹性工时); 格式: HH:mm', 'User', dbo, 'table', WorkingDayType, 'column', StartTime;

EXEC sp_addextendedproperty 'MS_Description', '下班时间; 不填表示不限下班时间(弹性工时); 格式: HH:mm', 'User', dbo, 'table', WorkingDayType, 'column', EndTime;

EXEC sp_addextendedproperty 'MS_Description', '可以迟到的时间，以分钟为单位', 'User', dbo, 'table', WorkingDayType, 'column', LateMinutes;

EXEC sp_addextendedproperty 'MS_Description', '实际在公司时间(包含中间休息时间)', 'User', dbo, 'table', WorkingDayType, 'column', WorkingHours;

EXEC sp_addextendedproperty 'MS_Description', '描述', 'User', dbo, 'table', WorkingDayType, 'column', Description;

EXEC sp_addextendedproperty 'MS_Description', '排序', 'User', dbo, 'table', WorkingDayType, 'column', Rank;

EXEC sp_addextendedproperty 'MS_Description', '归属地; 1: 中国(前缀: cn), 2: 台湾(前缀: tw)', 'User', dbo, 'table', WorkingDayType, 'column', Location;

EXEC sp_addextendedproperty 'MS_Description', '是否弹性工时(每天只要有打卡即可); 0: 非弹性工时, 1: 弹性工时', 'User', dbo, 'table', WorkingDayType, 'column', IsFlexTime;

EXEC sp_addextendedproperty 'MS_Description', '是否为特殊工作日, e.g. 客服做一休一、做六休一; 0: 非特殊工作日，员工周休二日，国定假日、补班日期，参考「Holiday」表; 1: 特殊工作日，需设定「SpecialWorkingDay」', 'User', dbo, 'table', WorkingDayType, 'column', IsSpecialDay;

EXEC sp_addextendedproperty 'MS_Description', '是否有餐费津贴(平常日加班，如果超过晚餐结束时间半小时之后，就有餐费津贴); 0: 有津贴, 1: 无津贴', 'User', dbo, 'table', WorkingDayType, 'column', IsMealAllowance;

EXEC sp_addextendedproperty 'MS_Description', '用餐开始时间(用餐时间内，不记入加班时间); 格式: HH:mm', 'User', dbo, 'table', WorkingDayType, 'column', StartDiningTime;

EXEC sp_addextendedproperty 'MS_Description', '用餐结束时间(用餐时间内，不记入加班时间); 格式: HH:mm', 'User', dbo, 'table', WorkingDayType, 'column', EndDiningTime;

EXEC sp_addextendedproperty 'MS_Description', '假期表; 每个人可用的年假、调休假。员工请假，需有假期额度才能放假的假期才要记录，e.g. 年假、调休假; 婚假、丧假等假期，等员工提出申请，由人事部审核的假期，不需记录在此表中', 'User', dbo, 'table', Vacation;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', Vacation, 'column', VacationId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的员工', 'User', dbo, 'table', Vacation, 'column', EmployeeId;

EXEC sp_addextendedproperty 'MS_Description', '假期类型; 1: 年假, 2: 调休假(加班累积的假)', 'User', dbo, 'table', Vacation, 'column', VacationType;

EXEC sp_addextendedproperty 'MS_Description', '年度', 'User', dbo, 'table', Vacation, 'column', Annual;

EXEC sp_addextendedproperty 'MS_Description', '可用开始时间; 不填表示不限制', 'User', dbo, 'table', Vacation, 'column', StartTime;

EXEC sp_addextendedproperty 'MS_Description', '过期时间; 不填表示不限制', 'User', dbo, 'table', Vacation, 'column', ExpireTime;

EXEC sp_addextendedproperty 'MS_Description', '假期总时数; 单位: 小时，最小单位为0.5小时。该年度可使用的所有时数，只会增加(因为调休)，不会因为请假而减少。使用时数，从LeaveRequest中查询', 'User', dbo, 'table', Vacation, 'column', VacationDuration;

EXEC sp_addextendedproperty 'MS_Description', '归属地; 1: 中国(前缀: cn), 2: 台湾(前缀: tw)', 'User', dbo, 'table', Vacation, 'column', Location;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', Vacation, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', '特殊工作日表；对类似客服做一休一的工作日，需要提早设定下个月(或更多)的上班日期。有设定的日期，表示要上班；没设定的日期，表示不上班', 'User', dbo, 'table', SpecialWorkingDay;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', SpecialWorkingDay, 'column', SpecialWorkingDayId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的工作日类型', 'User', dbo, 'table', SpecialWorkingDay, 'column', WorkingDayTypeId;

EXEC sp_addextendedproperty 'MS_Description', '上班日期; 年月日有用', 'User', dbo, 'table', SpecialWorkingDay, 'column', WorkingDay;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', SpecialWorkingDay, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', '角色表', 'User', dbo, 'table', Role;

EXEC sp_addextendedproperty 'MS_Description', '角色编码', 'User', dbo, 'table', Role, 'column', RoleCode;

EXEC sp_addextendedproperty 'MS_Description', '角色名称', 'User', dbo, 'table', Role, 'column', RoleName;

EXEC sp_addextendedproperty 'MS_Description', '角色等级，数字越小，等级越高', 'User', dbo, 'table', Role, 'column', RoleLevel;

EXEC sp_addextendedproperty 'MS_Description', '说明', 'User', dbo, 'table', Role, 'column', Description;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', Role, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', '是否启用; 0: 停用, 1: 启用', 'User', dbo, 'table', Role, 'column', IsEnabled;

EXEC sp_addextendedproperty 'MS_Description', '归属地; 1: 中国(前缀: cn), 2: 台湾(前缀: tw)', 'User', dbo, 'table', Role, 'column', Location;

EXEC sp_addextendedproperty 'MS_Description', '专案项目表', 'User', dbo, 'table', Project;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', Project, 'column', ProjectId;

EXEC sp_addextendedproperty 'MS_Description', '专案编码', 'User', dbo, 'table', Project, 'column', ProjectCode;

EXEC sp_addextendedproperty 'MS_Description', '专案名称', 'User', dbo, 'table', Project, 'column', ProjectName;

EXEC sp_addextendedproperty 'MS_Description', '描述', 'User', dbo, 'table', Project, 'column', Description;

EXEC sp_addextendedproperty 'MS_Description', '归属地; 1: 中国(前缀: cn), 2: 台湾(前缀: tw)', 'User', dbo, 'table', Project, 'column', Location;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', Project, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', '排序', 'User', dbo, 'table', Project, 'column', Rank;

EXEC sp_addextendedproperty 'MS_Description', '是否启用; 0: 停用, 1: 启用', 'User', dbo, 'table', Project, 'column', IsEnabled;

EXEC sp_addextendedproperty 'MS_Description', '职位表; e.g. 执行长、副总经理、财务长、高级总监、总监、副总监、高级经理、经理、副经理、高级主管、主管、高级专员、专员、助理', 'User', dbo, 'table', Position;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', Position, 'column', PositionId;

EXEC sp_addextendedproperty 'MS_Description', '职位编码', 'User', dbo, 'table', Position, 'column', PositionCode;

EXEC sp_addextendedproperty 'MS_Description', '职位名称', 'User', dbo, 'table', Position, 'column', PositionName;

EXEC sp_addextendedproperty 'MS_Description', '职位等级; 数字越小，等级越高', 'User', dbo, 'table', Position, 'column', Level;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', Position, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', '是否启用; 0: 停用, 1: 启用', 'User', dbo, 'table', Position, 'column', IsEnabled;

EXEC sp_addextendedproperty 'MS_Description', '归属地; 1: 中国(前缀: cn), 2: 台湾(前缀: tw)', 'User', dbo, 'table', Position, 'column', Location;

EXEC sp_addextendedproperty 'MS_Description', '加班申请表', 'User', dbo, 'table', OvertimeRequest;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', OvertimeRequest, 'column', OvertimeRequestId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的员工', 'User', dbo, 'table', OvertimeRequest, 'column', EmployeeId;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', OvertimeRequest, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', '预计加班时间', 'User', dbo, 'table', OvertimeRequest, 'column', ExpectTime;

EXEC sp_addextendedproperty 'MS_Description', '加班原因', 'User', dbo, 'table', OvertimeRequest, 'column', OvertimeReason;

EXEC sp_addextendedproperty 'MS_Description', '审核状态; 0：取消(只有状态是:待审核、主管审核中时，申请者可以取消; 审核通过之后，只有主管可以取消), 10: 待审核, 20: 主管审核中, 21: 审核通过, 22: 审核不通过', 'User', dbo, 'table', OvertimeRequest, 'column', AuditStatus;

EXEC sp_addextendedproperty 'MS_Description', '审核主管员工编号', 'User', dbo, 'table', OvertimeRequest, 'column', BossId;

EXEC sp_addextendedproperty 'MS_Description', '主管审核意见', 'User', dbo, 'table', OvertimeRequest, 'column', AuditComment;

EXEC sp_addextendedproperty 'MS_Description', '审核时间(审核通过或不通过)', 'User', dbo, 'table', OvertimeRequest, 'column', AuditTime;

EXEC sp_addextendedproperty 'MS_Description', '取消时间', 'User', dbo, 'table', OvertimeRequest, 'column', CancelTime;

EXEC sp_addextendedproperty 'MS_Description', '实际加班开始时间，由人事填入', 'User', dbo, 'table', OvertimeRequest, 'column', StartTime;

EXEC sp_addextendedproperty 'MS_Description', '实际加班结束时间，由人事填入', 'User', dbo, 'table', OvertimeRequest, 'column', EndTime;

EXEC sp_addextendedproperty 'MS_Description', '加班时数，单位：小时；最小单位为0.5小时; 由人事填入', 'User', dbo, 'table', OvertimeRequest, 'column', OvertimeDuration;

EXEC sp_addextendedproperty 'MS_Description', '隐藏的FK关系，负责的人事部人员', 'User', dbo, 'table', OvertimeRequest, 'column', HrId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 加班获得的调休时数，需要累加到对应的「调休假假期」时数中', 'User', dbo, 'table', OvertimeRequest, 'column', VacationId;

EXEC sp_addextendedproperty 'MS_Description', '操作记录表', 'User', dbo, 'table', OperateLog;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', OperateLog, 'column', OperateLogId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 执行此操作的员工', 'User', dbo, 'table', OperateLog, 'column', EmployeeId;

EXEC sp_addextendedproperty 'MS_Description', '操作的表名', 'User', dbo, 'table', OperateLog, 'column', TableName;

EXEC sp_addextendedproperty 'MS_Description', '操作表的PK', 'User', dbo, 'table', OperateLog, 'column', TableID;

EXEC sp_addextendedproperty 'MS_Description', '操作类型; 1: 增, 2: 删, 3: 改, 4: 审核, 5: 导出, 6: 查, 7: 登入', 'User', dbo, 'table', OperateLog, 'column', OperateType;

EXEC sp_addextendedproperty 'MS_Description', '操作前内容; 当OperateType为1(增)、3(改)、4(审核)时会有内容', 'User', dbo, 'table', OperateLog, 'column', Before;

EXEC sp_addextendedproperty 'MS_Description', '操作后内容; 当OperateType为3(改)、4(审核)时会有内容', 'User', dbo, 'table', OperateLog, 'column', After;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', OperateLog, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', 'IP', 'User', dbo, 'table', OperateLog, 'column', IP;

EXEC sp_addextendedproperty 'MS_Description', '日志描述', 'User', dbo, 'table', OperateLog, 'column', Description;

EXEC sp_addextendedproperty 'MS_Description', '菜单表', 'User', dbo, 'table', Menu;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', Menu, 'column', MenuId;

EXEC sp_addextendedproperty 'MS_Description', '菜单编码', 'User', dbo, 'table', Menu, 'column', MenuCode;

EXEC sp_addextendedproperty 'MS_Description', '菜单名称', 'User', dbo, 'table', Menu, 'column', MenuName;

EXEC sp_addextendedproperty 'MS_Description', '菜单显示的样式类', 'User', dbo, 'table', Menu, 'column', MenuClass;

EXEC sp_addextendedproperty 'MS_Description', '菜单层级', 'User', dbo, 'table', Menu, 'column', MenuLevel;

EXEC sp_addextendedproperty 'MS_Description', '上层菜单; 0 表示已经是最上层', 'User', dbo, 'table', Menu, 'column', ParentMenuId;

EXEC sp_addextendedproperty 'MS_Description', '菜单链接路径; 不填表示无链接效果', 'User', dbo, 'table', Menu, 'column', ActionPath;

EXEC sp_addextendedproperty 'MS_Description', '排序', 'User', dbo, 'table', Menu, 'column', Rank;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', Menu, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', '是否启用; 0: 停用, 1: 启用', 'User', dbo, 'table', Menu, 'column', IsEnabled;

EXEC sp_addextendedproperty 'MS_Description', '是否出现在导航菜单中', 'User', dbo, 'table', Menu, 'column', IsNavigate;

EXEC sp_addextendedproperty 'MS_Description', '要展开、highlight的菜单导航，使用显示的code; IsNavigate = true 时，NavigateCode = MenuCode; IsNavigate = false 时，NavigateCode = 想与哪个菜单(IsNavigate = true)一樣展開、highlight', 'User', dbo, 'table', Menu, 'column', NavigateCode;

EXEC sp_addextendedproperty 'MS_Description', '登入记录表', 'User', dbo, 'table', LoginLog;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', LoginLog, 'column', LoginLogId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的员工', 'User', dbo, 'table', LoginLog, 'column', EmployeeId;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', LoginLog, 'column', LoginTime;

EXEC sp_addextendedproperty 'MS_Description', '登入IP', 'User', dbo, 'table', LoginLog, 'column', LoginIP;

EXEC sp_addextendedproperty 'MS_Description', '请假使用假期表; e.g. 请年假、补休假时，需指定使用的假期记录', 'User', dbo, 'table', LeaveUseVacation;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', LeaveUseVacation, 'column', LeaveUseVacationId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的请假表', 'User', dbo, 'table', LeaveUseVacation, 'column', LeaveRequestId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的假期表', 'User', dbo, 'table', LeaveUseVacation, 'column', VacationId;

EXEC sp_addextendedproperty 'MS_Description', '使用假期时数', 'User', dbo, 'table', LeaveUseVacation, 'column', VacationDuration;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', LeaveUseVacation, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', '请假类型表; 定義员工请假的类型, e.g. 年假、事假、病假、婚假、丧假、旷职、出差', 'User', dbo, 'table', LeaveType;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', LeaveType, 'column', LeaveTypeId;

EXEC sp_addextendedproperty 'MS_Description', '假期编码', 'User', dbo, 'table', LeaveType, 'column', LeaveCode;

EXEC sp_addextendedproperty 'MS_Description', '假期名称', 'User', dbo, 'table', LeaveType, 'column', LeaveName;

EXEC sp_addextendedproperty 'MS_Description', '请假规定', 'User', dbo, 'table', LeaveType, 'column', LeaveRule;

EXEC sp_addextendedproperty 'MS_Description', '请假是否需要人事部审核; 0: 否, 1: 是', 'User', dbo, 'table', LeaveType, 'column', IsNeedHrAudit;

EXEC sp_addextendedproperty 'MS_Description', '归属地; 1: 中国(前缀: cn), 2: 台湾(前缀: tw)', 'User', dbo, 'table', LeaveType, 'column', Location;

EXEC sp_addextendedproperty 'MS_Description', '请假表(假单表)', 'User', dbo, 'table', LeaveRequest;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', LeaveRequest, 'column', LeaveRequestId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 请假的员工', 'User', dbo, 'table', LeaveRequest, 'column', EmployeeId;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', LeaveRequest, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 请假类型', 'User', dbo, 'table', LeaveRequest, 'column', LeaveTypeId;

EXEC sp_addextendedproperty 'MS_Description', '请假原因', 'User', dbo, 'table', LeaveRequest, 'column', LeaveReason;

EXEC sp_addextendedproperty 'MS_Description', '请假开始日期', 'User', dbo, 'table', LeaveRequest, 'column', StartTime;

EXEC sp_addextendedproperty 'MS_Description', '请假结束日期', 'User', dbo, 'table', LeaveRequest, 'column', EndTime;

EXEC sp_addextendedproperty 'MS_Description', '请假总时数，单位：小时；最小单位为0.5小时', 'User', dbo, 'table', LeaveRequest, 'column', LeaveDuration;

EXEC sp_addextendedproperty 'MS_Description', '审核状态; 0：取消(只有状态是:待审核、主管审核中时，申请者可以取消; 审核通过之后，只有主管可以取消), 10: 待审核, 20: 主管审核中, 21: 审核通过, 22: 审核不通过', 'User', dbo, 'table', LeaveRequest, 'column', AuditStatus;

EXEC sp_addextendedproperty 'MS_Description', '隐藏的FK关系，负责审核的主管', 'User', dbo, 'table', LeaveRequest, 'column', BossId;

EXEC sp_addextendedproperty 'MS_Description', '主管审核意见', 'User', dbo, 'table', LeaveRequest, 'column', AuditComment;

EXEC sp_addextendedproperty 'MS_Description', '主管接受请求(设定为待审核)的时间', 'User', dbo, 'table', LeaveRequest, 'column', AcceptTime;

EXEC sp_addextendedproperty 'MS_Description', '审核时间(审核通过或不通过)', 'User', dbo, 'table', LeaveRequest, 'column', AuditTime;

EXEC sp_addextendedproperty 'MS_Description', '取消时间', 'User', dbo, 'table', LeaveRequest, 'column', CancelTime;

EXEC sp_addextendedproperty 'MS_Description', '人事部门审核意见', 'User', dbo, 'table', LeaveRequest, 'column', HrComment;

EXEC sp_addextendedproperty 'MS_Description', '请假类型是挥假、丧假之类的类型时，需要人事部审核; 10: 待审核, 20: 人事审核中, 21: 审核通过, 22: 审核不通过', 'User', dbo, 'table', LeaveRequest, 'column', HrAuditStatus;

EXEC sp_addextendedproperty 'MS_Description', '隐藏的FK关系，负责审核的人事部人员', 'User', dbo, 'table', LeaveRequest, 'column', HrId;

EXEC sp_addextendedproperty 'MS_Description', '人事接受请求(设定为待审核)的时间', 'User', dbo, 'table', LeaveRequest, 'column', HrAcceptTime;

EXEC sp_addextendedproperty 'MS_Description', '人事审核时间(审核通过或不通过)', 'User', dbo, 'table', LeaveRequest, 'column', HrAuditTime;

EXEC sp_addextendedproperty 'MS_Description', '工作职能表; e.g. 运营、企划、开发、管理、设计、财务、运维、产品、客服、市场、BD、顾问', 'User', dbo, 'table', JobFunction;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', JobFunction, 'column', JobFunctionId;

EXEC sp_addextendedproperty 'MS_Description', '职能编码', 'User', dbo, 'table', JobFunction, 'column', FunctionCode;

EXEC sp_addextendedproperty 'MS_Description', '职能名称', 'User', dbo, 'table', JobFunction, 'column', FunctionName;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', JobFunction, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', '排序', 'User', dbo, 'table', JobFunction, 'column', Rank;

EXEC sp_addextendedproperty 'MS_Description', '归属地; 1: 中国(前缀: cn), 2: 台湾(前缀: tw)', 'User', dbo, 'table', JobFunction, 'column', Location;

EXEC sp_addextendedproperty 'MS_Description', '工作放假日期表', 'User', dbo, 'table', Holiday;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', Holiday, 'column', HolidayId;

EXEC sp_addextendedproperty 'MS_Description', '日期名称; e.g. 元旦、中秋节', 'User', dbo, 'table', Holiday, 'column', DayName;

EXEC sp_addextendedproperty 'MS_Description', '指定日期', 'User', dbo, 'table', Holiday, 'column', TheDay;

EXEC sp_addextendedproperty 'MS_Description', '是否为工作日; 0: 非工作日(假日), 1 工作日。指定日期在周一～周五，为「非工作日」;指定日期在周六、日，为「工作日」', 'User', dbo, 'table', Holiday, 'column', IsWorkingDay;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', Holiday, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', '提早放假时间; 只有「非工作日」有用，等于0，表示整天放假。e.g. 2: 表示当天「提早」2小时下班', 'User', dbo, 'table', Holiday, 'column', HolidayDuration;

EXEC sp_addextendedproperty 'MS_Description', '此假期是否只适用女性; 只有「非工作日」有用; 0: 不限男女, 1: 只限女性', 'User', dbo, 'table', Holiday, 'column', IsForFemale;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 设定的管理员', 'User', dbo, 'table', Holiday, 'column', EmployeeId;

EXEC sp_addextendedproperty 'MS_Description', '归属地; 1: 中国(前缀: cn), 2: 台湾(前缀: tw)', 'User', dbo, 'table', Holiday, 'column', Location;

EXEC sp_addextendedproperty 'MS_Description', '假日加班，需返还的加班时数倍数', 'User', dbo, 'table', Holiday, 'column', OvertimeReturnTimes;

EXEC sp_addextendedproperty 'MS_Description', '员工角色表', 'User', dbo, 'table', EmployeeRole;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', EmployeeRole, 'column', EmployeeRoleId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的角色', 'User', dbo, 'table', EmployeeRole, 'column', RoleId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的员工', 'User', dbo, 'table', EmployeeRole, 'column', EmployeeId;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', EmployeeRole, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', '员工参与专案表', 'User', dbo, 'table', EmployeeProject;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', EmployeeProject, 'column', EmployeeProjectId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的员工', 'User', dbo, 'table', EmployeeProject, 'column', EmployeeId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的专案', 'User', dbo, 'table', EmployeeProject, 'column', ProjectId;

EXEC sp_addextendedproperty 'MS_Description', '部门表', 'User', dbo, 'table', Department;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', Department, 'column', DepartmentId;

EXEC sp_addextendedproperty 'MS_Description', '部门编码', 'User', dbo, 'table', Department, 'column', DepartmentCode;

EXEC sp_addextendedproperty 'MS_Description', '部门名称', 'User', dbo, 'table', Department, 'column', DepartmentName;

EXEC sp_addextendedproperty 'MS_Description', '部门层级', 'User', dbo, 'table', Department, 'column', Level;

EXEC sp_addextendedproperty 'MS_Description', '上级部门的ID；如果是第一层(Level=1)，则填0', 'User', dbo, 'table', Department, 'column', ParentId;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', Department, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', '排序', 'User', dbo, 'table', Department, 'column', Rank;

EXEC sp_addextendedproperty 'MS_Description', '是否启用; 0: 停用, 1: 启用', 'User', dbo, 'table', Department, 'column', IsEnabled;

EXEC sp_addextendedproperty 'MS_Description', '归属地; 1: 中国(前缀: cn), 2: 台湾(前缀: tw)', 'User', dbo, 'table', Department, 'column', Location;

EXEC sp_addextendedproperty 'MS_Description', '公司表', 'User', dbo, 'table', Company;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', Company, 'column', CompanyId;

EXEC sp_addextendedproperty 'MS_Description', '公司名称', 'User', dbo, 'table', Company, 'column', CompanyName;

EXEC sp_addextendedproperty 'MS_Description', '归属地; 1: 中国(前缀: cn), 2: 台湾(前缀: tw)', 'User', dbo, 'table', Company, 'column', Location;

EXEC sp_addextendedproperty 'MS_Description', '审核主管表; 员工请假、请款、出差等任何流程，需要主管依次审核通过。每个员工，可以多个主管审核通过，不限一个', 'User', dbo, 'table', AuditBoss;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', AuditBoss, 'column', AuditBossId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的被审核员工', 'User', dbo, 'table', AuditBoss, 'column', EmployeeId;

EXEC sp_addextendedproperty 'MS_Description', '隐藏的FK关系，负责审核该员工的主管', 'User', dbo, 'table', AuditBoss, 'column', BossId;

EXEC sp_addextendedproperty 'MS_Description', '审核步骤; 如果有多个主管，而且有审核顺序时设定(e.g. 收主管A省核通过，才能提交给主管B审核); 1 表示最先审核', 'User', dbo, 'table', AuditBoss, 'column', Step;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', AuditBoss, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', '考勤表', 'User', dbo, 'table', Attendance;
EXEC sp_addextendedproperty 'MS_Description', 'PK', 'User', dbo, 'table', Attendance, 'column', AttendanceId;

EXEC sp_addextendedproperty 'MS_Description', '工作日; 只有年月日有效，不考虑时分秒', 'User', dbo, 'table', Attendance, 'column', WorkingDay;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 关连的员工', 'User', dbo, 'table', Attendance, 'column', EmployeeId;

EXEC sp_addextendedproperty 'MS_Description', '上班时间', 'User', dbo, 'table', Attendance, 'column', ArriveTime;

EXEC sp_addextendedproperty 'MS_Description', '下班时间', 'User', dbo, 'table', Attendance, 'column', LeaveTime;

EXEC sp_addextendedproperty 'MS_Description', '是否迟到; 0: 没迟到, 1: 迟到', 'User', dbo, 'table', Attendance, 'column', IsArriveLate;

EXEC sp_addextendedproperty 'MS_Description', '是否早退; 0: 没早退, 1: 早退', 'User', dbo, 'table', Attendance, 'column', IsLeaveEarly;

EXEC sp_addextendedproperty 'MS_Description', '迟到时间; 单位: 分钟; IsArriveLate = 1 时有效', 'User', dbo, 'table', Attendance, 'column', ArriveLateDuration;

EXEC sp_addextendedproperty 'MS_Description', '早退时间; 单位: 分钟; IsLeaveEarly = 1 时有效', 'User', dbo, 'table', Attendance, 'column', LeaveEarlyDuration;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 请假类型', 'User', dbo, 'table', Attendance, 'column', LeaveTypeId;

EXEC sp_addextendedproperty 'MS_Description', '当天请假时数，单位：小时；最小单位为0.5小时; 一天最多8小时', 'User', dbo, 'table', Attendance, 'column', LeaveDuration;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', Attendance, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 若是有请假，则关连到请假申请', 'User', dbo, 'table', Attendance, 'column', LeaveRequestId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的加班请求; 不为null, 而且对应的审核状态为审核通过，表示加班', 'User', dbo, 'table', Attendance, 'column', OvertimeRequestId;

EXEC sp_addextendedproperty 'MS_Description', '员工表', 'User', dbo, 'table', Employee;
EXEC sp_addextendedproperty 'MS_Description', 'PK, 员工工号, 由管理员输入', 'User', dbo, 'table', Employee, 'column', EmployeeId;

EXEC sp_addextendedproperty 'MS_Description', '员工归属地; 0: 不限(e.g. 老板), 1: 中国(前缀: cn), 2: 台湾(前缀: tw)', 'User', dbo, 'table', Employee, 'column', Location;

EXEC sp_addextendedproperty 'MS_Description', '员工编码，由人事部填入；依归属地，加入不同的前缀(e.g. cn、tw)', 'User', dbo, 'table', Employee, 'column', EmolpyeeNumber;

EXEC sp_addextendedproperty 'MS_Description', '员工姓名', 'User', dbo, 'table', Employee, 'column', EmployeeName;

EXEC sp_addextendedproperty 'MS_Description', '员工状态; 0: 离职, 1: 在职, 10: 留职停薪, 11: 长期病假', 'User', dbo, 'table', Employee, 'column', EmployeeStatus;

EXEC sp_addextendedproperty 'MS_Description', '昵称', 'User', dbo, 'table', Employee, 'column', NickName;

EXEC sp_addextendedproperty 'MS_Description', '入职日期', 'User', dbo, 'table', Employee, 'column', OnBoardDate;

EXEC sp_addextendedproperty 'MS_Description', '身分证字号', 'User', dbo, 'table', Employee, 'column', IdentityNumber;

EXEC sp_addextendedproperty 'MS_Description', '公司邮箱; 因为可能离职后又入职，所以e-mail 会相同; 不用SSO登入的话，使用e-mail当做帐号登入', 'User', dbo, 'table', Employee, 'column', Email;

EXEC sp_addextendedproperty 'MS_Description', '登入密码', 'User', dbo, 'table', Employee, 'column', Password;

EXEC sp_addextendedproperty 'MS_Description', '个人邮箱，接收薪资通知用', 'User', dbo, 'table', Employee, 'column', PersonalEmail;

EXEC sp_addextendedproperty 'MS_Description', '手机号', 'User', dbo, 'table', Employee, 'column', Mobile;

EXEC sp_addextendedproperty 'MS_Description', '分机号', 'User', dbo, 'table', Employee, 'column', Ext;

EXEC sp_addextendedproperty 'MS_Description', '生日', 'User', dbo, 'table', Employee, 'column', Birthday;

EXEC sp_addextendedproperty 'MS_Description', '性别; 0: 女性, 1: 男性', 'User', dbo, 'table', Employee, 'column', Gender;

EXEC sp_addextendedproperty 'MS_Description', '是否结婚; 0: 未婚, 1: 已婚', 'User', dbo, 'table', Employee, 'column', IsMarried;

EXEC sp_addextendedproperty 'MS_Description', '结婚日期', 'User', dbo, 'table', Employee, 'column', MarriageDate;

EXEC sp_addextendedproperty 'MS_Description', '是否有小孩; 0: 无, 1: 有', 'User', dbo, 'table', Employee, 'column', HasChild;

EXEC sp_addextendedproperty 'MS_Description', '通讯地址', 'User', dbo, 'table', Employee, 'column', CommAddress;

EXEC sp_addextendedproperty 'MS_Description', '通讯地址电话', 'User', dbo, 'table', Employee, 'column', CommPhone;

EXEC sp_addextendedproperty 'MS_Description', '户籍地址', 'User', dbo, 'table', Employee, 'column', RegAddress;

EXEC sp_addextendedproperty 'MS_Description', '户籍地址电话', 'User', dbo, 'table', Employee, 'column', RegPhone;

EXEC sp_addextendedproperty 'MS_Description', '紧急联系人姓名', 'User', dbo, 'table', Employee, 'column', EmergencyName;

EXEC sp_addextendedproperty 'MS_Description', '紧急联系人电话', 'User', dbo, 'table', Employee, 'column', EmergencyMobile;

EXEC sp_addextendedproperty 'MS_Description', '紧急联系人关系', 'User', dbo, 'table', Employee, 'column', EmergencyRelation;

EXEC sp_addextendedproperty 'MS_Description', '招聘来源', 'User', dbo, 'table', Employee, 'column', RecruitSource;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 所属公司', 'User', dbo, 'table', Employee, 'column', CompanyId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 所属部门', 'User', dbo, 'table', Employee, 'column', DepartmentId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 所属职位', 'User', dbo, 'table', Employee, 'column', PositionId;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 所属的职能; 可为空', 'User', dbo, 'table', Employee, 'column', JobFunctionId;

EXEC sp_addextendedproperty 'MS_Description', '劳动类型; 1: 正职, 2: 劳务(兼职、临时工、钟点工、实习生)', 'User', dbo, 'table', Employee, 'column', LaborType;

EXEC sp_addextendedproperty 'MS_Description', '离职日期', 'User', dbo, 'table', Employee, 'column', LeaveDate;

EXEC sp_addextendedproperty 'MS_Description', '建立时间', 'User', dbo, 'table', Employee, 'column', CreateTime;

EXEC sp_addextendedproperty 'MS_Description', 'FK, 对应的工作日类型; 不填表示不计时，e.g. 老板、司机', 'User', dbo, 'table', Employee, 'column', WorkingDayTypeId;

EXEC sp_addextendedproperty 'MS_Description', '最后登入时间', 'User', dbo, 'table', Employee, 'column', LoginTime;

EXEC sp_addextendedproperty 'MS_Description', '最后登入IP', 'User', dbo, 'table', Employee, 'column', LoginIp;

EXEC sp_addextendedproperty 'MS_Description', '主管员工编号', 'User', dbo, 'table', Employee, 'column', BossId;

EXEC sp_addextendedproperty 'MS_Description', '个人图片路径', 'User', dbo, 'table', Employee, 'column', ImagePath;

EXEC sp_addextendedproperty 'MS_Description', '登入后，强制修改登入密码; 1：强制修改密码, 0: 已修改，不强制修改密码', 'User', dbo, 'table', Employee, 'column', ForceChangePassword;

EXEC sp_addextendedproperty 'MS_Description', '代理人', 'User', dbo, 'table', Employee, 'column', AgentId;

EXEC sp_addextendedproperty 'MS_Description', '联合登入后，保存的Open id', 'User', dbo, 'table', Employee, 'column', OpenId;
